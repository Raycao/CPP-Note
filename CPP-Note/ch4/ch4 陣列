陣列:

一維陣列:

C++提供「陣列」（Array）
讓您可以宣告一個以「索引」（index）作為識別的資料結構
宣告陣列的方式如下：  資料型態 名稱[大小];


範例： 
int iarr[10];    // 宣告10個元素的整數Array 
double darr[10];    // 宣告10個元素的浮點數Array 
char carr[10];    // 宣告10個元素的字元Array

靜態陣列的宣告方式，陣列長度必須事先決定，所以您不可以使用變數來事後決定陣列的長度
動態宣告陣列長度，可以使用一些資料結構與動態記憶 體宣告來解決陣列大小必須固定的問題

宣告陣列之後，陣列所配置到的記憶體空間中所儲存的數是未知的
所以在初始陣列元素值之前，當中的元素值是未知的
可以這麼宣告陣列： 
int irr[10] = {0}; 
double darr[10] = {0.0}; 
char carr[10] = {'\0'}; 
bool barr[10] = {false};


欲得知陣列的長度，您可以使用 sizeof()運算子，例如： 
int iarr[] = {1, 2, 3, 4, 5, 6}; 
cout << "Array長度：" 
         << (sizeof(iarr) / sizeof(iarr[0])) 
         << endl;

透過陣列整體的記憶體空間大小，去除以陣列中一個元素的記憶體大小
便可以清楚知道工有多少個元素

不可以將陣列直接指定給另一個陣列，或是直接比較兩個陣列是否相同
這與位址有關，若有指定給另一個陣列，也就是複製陣列
需要循序一個一個元素進行複製
同樣地，若想知道兩陣列元素是否相同，也要循序一個一個元素去比對

陣列範例: array.cpp


二維陣列:

二維陣列使用陣列名稱與兩個索引值來指定存取陣列元素，其宣告方式與一維陣列類似：
int iarr[5][10];
範例:array2.cpp


宣告二維陣列的值，例如下:
int iarr[2][3] = {{1, 2, 3}, {4, 5, 6}};

如果您清楚二維陣列的記憶體配置方式，您會理解到{ }其實是可以不用的
例如： int iarr[2][3] = {1, 2, 3, 4, 5, 6};

