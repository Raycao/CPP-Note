算術運算、型態轉換:

%運算子是餘除運算子 它計算除法後的餘數
一個例子是若您要產生指定位數的亂數，就可以使用%運算子
例如: cout << rand() % 100;


型態轉換的問題
int number = 10; 
cout << number / 3;

答案會是3，小數點被削去了，因為number是整數，除以3也是整數
所以運算出來會被自動轉換為整數
在看下面的例子

double number = 10.0;
cout << number / 3;

這次的結果就會是3.333333，此為c++的隱式型態轉換（Implicit type conversion）
在一個型態混雜的算式中，長度較長的資料型態會成為目標型態，較小的型態會自動提升為目標型態

所以上例中，double是較長的型態，最為目標
3為int，所以要轉為目標型態，變為3.0
這樣的轉換又稱算術轉換（Arithmetic conversion）。

左邊的數值會成為目標型態
當右邊的數值型態比左邊的數值型態長度小時
右邊的數值會自動提升為目標型態
例如: 
int num = 10;
double number = num;

如果右邊的數值型態比左邊的數值型態型態長度大時
超出可儲存範圍的部份會被自動消去
由於失去的精度，在編譯時編譯器會提出警訊


如果確定這個動作是您想要的，那麼您可以使用顯式型態轉換（Explicit type conversion）或稱之為強制轉型（Cast）
例如：
int num = 0; 
double number = 3.14; 
num = static_cast<int>(number);


關係運算、條件運算:

不多做講解
在C++中，所有非零的數值在作為條件式時都被視為true。 

「條件運算子」（Conditional operator），它的使用方式如下： 
條件式 ? 成立傳回值 : 失敗傳回值
範例: condition.cpp
判斷書入是否為奇數? 範例: condition2.cpp


邏輯運算、位元運算:

「邏輯運算子」（Logical operator）分別為「且」（&&）、「或」（||）及「反相」（!）
「位元運算子」（Bitwise operator）分別是AND （&）、OR（|）、NOT（!）、XOR（^）與補數（~）
範例: logic.cpp

位元運算對初學者來說的確較不常用，但如果用的洽當的話，可以增進不少程式效率
以剛剛的是否為奇數再做一次範例: logic2.cpp


遞增、遞減、指定運算:
不多做討論，例:i++, i--,
指定運算，例: +=, -=,  
