向量:

陣列型式（Array idiom） vector:

可以使用vector來替代陣列
並使用陣列型式（Array idiom）的方式來操作vector
要使用vector，必須含入vector表頭檔：
#include <vector>


要建立vector物件，須提供元素型態與長度資料
例: vector<int> ivector(10);
範例: vector.cpp

可以透過size()取得元素長度，empty()測試長度是否為0
當您宣告vector物件時，所有的元素值會有與型態相應的初始值
例如算術型態為0

如果要將元素初始為指定值，可以如此宣告
例: vector<int> ivector(10, 5);
表示為建立10個元素，且其初始值皆設為5

也可以利用陣列來建立vector
所以vector會擁有此陣列所指定的元素初值
如果要將完整的array建立至vector中
則要指定元素的初始位址與最後一個元素的下一個位址
範例: vector2.cpp


那如果是指定陣列的其中一段範圍
則一樣，第一個參數放目標範圍的第一個元素位址
第二個參數放範圍的最後一個元素的下一個位址
範例: vector3.cpp


除了用array來建立物件外
也可以使用另一個vector作為引數來建構物件
例:
vector<int> ivector1(5, 1);
vector<int> ivector2(ivector1);

你可以發現ivector1建立五個元素，其初始值為1
而ivector2則用ivector1來建構物件

****要注意的是**********
vector可以使用=直接指定給另一個vector
這會將vector的值複製給被指定的vector
這跟array是不一樣的，array並沒辦法如此指定
範例: vector4.cpp



STL 型式（STL idiom） vector:

vector的STL型式，其實就是以物件導向的方式來操作vector
這樣的方式是比較好的!!!!


將元素放入vector中，可以使用push_back()，例如：
for(int i = 0; i < 5; i++) {
    ivector.push_back(i);
}


果打算將元素循序取出，則可以begin()與end()方法分別傳回起始位置的iterator與結束位置的iterator，例如：
for(vector<int>::iterator it = ivector.begin();it != ivector.end();it++) {
    cout << *it << " ";
}
cout << endl;

iterator是標準函式庫定義類別（Class），它是一個指標
指向iterator物件的真正位址，對它進行++的動作
表示移動至 iterator的下一個元素
對它使用*運算子（Dereferences operator）
表示提取出iterator目前位址的值
如果iterator走訪至結束位置的iterator的位址，表示元素走訪完畢

這樣的好處是當使用push_back()將元素加入vector時，vector的長度會自動增長
類似於Java的arraylist.add這樣
使用capacity()可以取得cector容量
size()可以取得元素長度
範例: vector_STL.cpp


如果打算對vector進行排序、尋找、反轉等操作
可以使用標準函式庫中的泛型演算法，要使用泛型演算法必須先含入表頭檔：
#include <algorithm>
範例: vector_STL2.cpp
